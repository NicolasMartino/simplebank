// Code generated by sqlc. DO NOT EDIT.
// source: users.sql

package db

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(
    email,
    hashed_password,
    first_name,
    last_name,
    password_change_at
)
VALUES($1, $2, $3, $4, $5)
RETURNING id, email, hashed_password, first_name, last_name, created_at, password_change_at
`

type CreateUserParams struct {
	Email            string    `json:"email"`
	HashedPassword   string    `json:"hashed_password"`
	FirstName        string    `json:"first_name"`
	LastName         string    `json:"last_name"`
	PasswordChangeAt time.Time `json:"password_change_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.HashedPassword,
		arg.FirstName,
		arg.LastName,
		arg.PasswordChangeAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.PasswordChangeAt,
	)
	return i, err
}

const findUser = `-- name: FindUser :one
SELECT id, email, hashed_password, first_name, last_name, created_at, password_change_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) FindUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, findUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.PasswordChangeAt,
	)
	return i, err
}

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT id, email, hashed_password, first_name, last_name, created_at, password_change_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) FindUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.PasswordChangeAt,
	)
	return i, err
}

const updateUserHash = `-- name: UpdateUserHash :one
update users
set hashed_password = $2, password_change_at = (select now()::timestamptz)
where id =$1
RETURNING id, email, hashed_password, first_name, last_name, created_at, password_change_at
`

type UpdateUserHashParams struct {
	ID             int64  `json:"id"`
	HashedPassword string `json:"hashed_password"`
}

func (q *Queries) UpdateUserHash(ctx context.Context, arg UpdateUserHashParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserHash, arg.ID, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.PasswordChangeAt,
	)
	return i, err
}
